<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="650" onload="init(evt)" viewBox="0 0 1200 650" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="650" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg --pid 448382</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="639.00"> </text><svg id="frames" x="10" width="1180" total_samples="2542"><g><title>fibonacci (complex.py:6) (3 samples, 0.12%)</title><rect x="0.2360%" y="404" width="0.1180%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="3"/><text x="0.4860%" y="414.50"></text></g><g><title>fibonacci (complex.py:6) (3 samples, 0.12%)</title><rect x="0.5507%" y="420" width="0.1180%" height="15" fill="rgb(217,0,24)" fg:x="14" fg:w="3"/><text x="0.8007%" y="430.50"></text></g><g><title>fibonacci (complex.py:6) (4 samples, 0.16%)</title><rect x="0.9048%" y="436" width="0.1574%" height="15" fill="rgb(221,193,54)" fg:x="23" fg:w="4"/><text x="1.1548%" y="446.50"></text></g><g><title>fibonacci (complex.py:6) (13 samples, 0.51%)</title><rect x="1.7703%" y="452" width="0.5114%" height="15" fill="rgb(248,212,6)" fg:x="45" fg:w="13"/><text x="2.0203%" y="462.50"></text></g><g><title>fibonacci (complex.py:6) (25 samples, 0.98%)</title><rect x="3.3832%" y="468" width="0.9835%" height="15" fill="rgb(208,68,35)" fg:x="86" fg:w="25"/><text x="3.6332%" y="478.50"></text></g><g><title>fibonacci (complex.py:6) (45 samples, 1.77%)</title><rect x="6.6090%" y="484" width="1.7703%" height="15" fill="rgb(232,128,0)" fg:x="168" fg:w="45"/><text x="6.8590%" y="494.50">f..</text></g><g><title>fibonacci (complex.py:6) (83 samples, 3.27%)</title><rect x="12.7459%" y="500" width="3.2651%" height="15" fill="rgb(207,160,47)" fg:x="324" fg:w="83"/><text x="12.9959%" y="510.50">fib..</text></g><g><title>fibonacci (complex.py:7) (15 samples, 0.59%)</title><rect x="16.0110%" y="500" width="0.5901%" height="15" fill="rgb(228,23,34)" fg:x="407" fg:w="15"/><text x="16.2610%" y="510.50"></text></g><g><title>fibonacci (complex.py:6) (138 samples, 5.43%)</title><rect x="23.8395%" y="516" width="5.4288%" height="15" fill="rgb(218,30,26)" fg:x="606" fg:w="138"/><text x="24.0895%" y="526.50">fibonac..</text></g><g><title>fibonacci (complex.py:7) (39 samples, 1.53%)</title><rect x="29.2683%" y="516" width="1.5342%" height="15" fill="rgb(220,122,19)" fg:x="744" fg:w="39"/><text x="29.5183%" y="526.50"></text></g><g><title>fibonacci (complex.py:6) (199 samples, 7.83%)</title><rect x="40.5586%" y="532" width="7.8285%" height="15" fill="rgb(250,228,42)" fg:x="1031" fg:w="199"/><text x="40.8086%" y="542.50">fibonacci (..</text></g><g><title>fibonacci (complex.py:7) (59 samples, 2.32%)</title><rect x="48.3871%" y="532" width="2.3210%" height="15" fill="rgb(240,193,28)" fg:x="1230" fg:w="59"/><text x="48.6371%" y="542.50">f..</text></g><g><title>fibonacci (complex.py:6) (174 samples, 6.85%)</title><rect x="59.7561%" y="548" width="6.8450%" height="15" fill="rgb(216,20,37)" fg:x="1519" fg:w="174"/><text x="60.0061%" y="558.50">fibonacci..</text></g><g><title>fibonacci (complex.py:7) (92 samples, 3.62%)</title><rect x="66.6011%" y="548" width="3.6192%" height="15" fill="rgb(206,188,39)" fg:x="1693" fg:w="92"/><text x="66.8511%" y="558.50">fibo..</text></g><g><title>fibonacci (complex.py:6) (139 samples, 5.47%)</title><rect x="76.7506%" y="564" width="5.4681%" height="15" fill="rgb(217,207,13)" fg:x="1951" fg:w="139"/><text x="77.0006%" y="574.50">fibonac..</text></g><g><title>fibonacci (complex.py:7) (91 samples, 3.58%)</title><rect x="82.2187%" y="564" width="3.5799%" height="15" fill="rgb(231,73,38)" fg:x="2090" fg:w="91"/><text x="82.4687%" y="574.50">fibo..</text></g><g><title>fibonacci (complex.py:6) (90 samples, 3.54%)</title><rect x="89.2998%" y="580" width="3.5405%" height="15" fill="rgb(225,20,46)" fg:x="2270" fg:w="90"/><text x="89.5498%" y="590.50">fibo..</text></g><g><title>fibonacci (complex.py:7) (45 samples, 1.77%)</title><rect x="92.8403%" y="580" width="1.7703%" height="15" fill="rgb(210,31,41)" fg:x="2360" fg:w="45"/><text x="93.0903%" y="590.50">f..</text></g><g><title>fibonacci (complex.py:6) (32 samples, 1.26%)</title><rect x="96.5775%" y="596" width="1.2589%" height="15" fill="rgb(221,200,47)" fg:x="2455" fg:w="32"/><text x="96.8275%" y="606.50"></text></g><g><title>fibonacci (complex.py:7) (21 samples, 0.83%)</title><rect x="97.8363%" y="596" width="0.8261%" height="15" fill="rgb(226,26,5)" fg:x="2487" fg:w="21"/><text x="98.0863%" y="606.50"></text></g><g><title>fibonacci (complex.py:6) (8 samples, 0.31%)</title><rect x="99.0952%" y="612" width="0.3147%" height="15" fill="rgb(249,33,26)" fg:x="2519" fg:w="8"/><text x="99.3452%" y="622.50"></text></g><g><title>fibonacci (complex.py:7) (6 samples, 0.24%)</title><rect x="99.4099%" y="612" width="0.2360%" height="15" fill="rgb(235,183,28)" fg:x="2527" fg:w="6"/><text x="99.6599%" y="622.50"></text></g><g><title>complex_function (complex.py:14) (2,539 samples, 99.88%)</title><rect x="0.0000%" y="196" width="99.8820%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="2539"/><text x="0.2500%" y="206.50">complex_function (complex.py:14)</text></g><g><title>fibonacci (complex.py:9) (2,539 samples, 99.88%)</title><rect x="0.0000%" y="212" width="99.8820%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="2539"/><text x="0.2500%" y="222.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,539 samples, 99.88%)</title><rect x="0.0000%" y="228" width="99.8820%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="2539"/><text x="0.2500%" y="238.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,539 samples, 99.88%)</title><rect x="0.0000%" y="244" width="99.8820%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="2539"/><text x="0.2500%" y="254.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,539 samples, 99.88%)</title><rect x="0.0000%" y="260" width="99.8820%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="2539"/><text x="0.2500%" y="270.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,539 samples, 99.88%)</title><rect x="0.0000%" y="276" width="99.8820%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="2539"/><text x="0.2500%" y="286.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,539 samples, 99.88%)</title><rect x="0.0000%" y="292" width="99.8820%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="2539"/><text x="0.2500%" y="302.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,539 samples, 99.88%)</title><rect x="0.0000%" y="308" width="99.8820%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="2539"/><text x="0.2500%" y="318.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,539 samples, 99.88%)</title><rect x="0.0000%" y="324" width="99.8820%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="2539"/><text x="0.2500%" y="334.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,539 samples, 99.88%)</title><rect x="0.0000%" y="340" width="99.8820%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="2539"/><text x="0.2500%" y="350.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,539 samples, 99.88%)</title><rect x="0.0000%" y="356" width="99.8820%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="2539"/><text x="0.2500%" y="366.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,536 samples, 99.76%)</title><rect x="0.1180%" y="372" width="99.7640%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="2536"/><text x="0.3680%" y="382.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,534 samples, 99.69%)</title><rect x="0.1967%" y="388" width="99.6853%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="2534"/><text x="0.4467%" y="398.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,530 samples, 99.53%)</title><rect x="0.3541%" y="404" width="99.5279%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="2530"/><text x="0.6041%" y="414.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,522 samples, 99.21%)</title><rect x="0.6688%" y="420" width="99.2132%" height="15" fill="rgb(226,3,54)" fg:x="17" fg:w="2522"/><text x="0.9188%" y="430.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,512 samples, 98.82%)</title><rect x="1.0622%" y="436" width="98.8198%" height="15" fill="rgb(245,192,40)" fg:x="27" fg:w="2512"/><text x="1.3122%" y="446.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,481 samples, 97.60%)</title><rect x="2.2817%" y="452" width="97.6003%" height="15" fill="rgb(238,167,29)" fg:x="58" fg:w="2481"/><text x="2.5317%" y="462.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,428 samples, 95.52%)</title><rect x="4.3666%" y="468" width="95.5153%" height="15" fill="rgb(232,182,51)" fg:x="111" fg:w="2428"/><text x="4.6166%" y="478.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,324 samples, 91.42%)</title><rect x="8.4579%" y="484" width="91.4241%" height="15" fill="rgb(231,60,39)" fg:x="215" fg:w="2324"/><text x="8.7079%" y="494.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (2,117 samples, 83.28%)</title><rect x="16.6011%" y="500" width="83.2809%" height="15" fill="rgb(208,69,12)" fg:x="422" fg:w="2117"/><text x="16.8511%" y="510.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (1,756 samples, 69.08%)</title><rect x="30.8025%" y="516" width="69.0795%" height="15" fill="rgb(235,93,37)" fg:x="783" fg:w="1756"/><text x="31.0525%" y="526.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (1,250 samples, 49.17%)</title><rect x="50.7081%" y="532" width="49.1739%" height="15" fill="rgb(213,116,39)" fg:x="1289" fg:w="1250"/><text x="50.9581%" y="542.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (754 samples, 29.66%)</title><rect x="70.2203%" y="548" width="29.6617%" height="15" fill="rgb(222,207,29)" fg:x="1785" fg:w="754"/><text x="70.4703%" y="558.50">fibonacci (complex.py:9)</text></g><g><title>fibonacci (complex.py:9) (358 samples, 14.08%)</title><rect x="85.7986%" y="564" width="14.0834%" height="15" fill="rgb(206,96,30)" fg:x="2181" fg:w="358"/><text x="86.0486%" y="574.50">fibonacci (complex.py..</text></g><g><title>fibonacci (complex.py:9) (134 samples, 5.27%)</title><rect x="94.6105%" y="580" width="5.2714%" height="15" fill="rgb(218,138,4)" fg:x="2405" fg:w="134"/><text x="94.8605%" y="590.50">fibona..</text></g><g><title>fibonacci (complex.py:9) (31 samples, 1.22%)</title><rect x="98.6625%" y="596" width="1.2195%" height="15" fill="rgb(250,191,14)" fg:x="2508" fg:w="31"/><text x="98.9125%" y="606.50"></text></g><g><title>fibonacci (complex.py:9) (6 samples, 0.24%)</title><rect x="99.6459%" y="612" width="0.2360%" height="15" fill="rgb(239,60,40)" fg:x="2533" fg:w="6"/><text x="99.8959%" y="622.50"></text></g><g><title>all (2,542 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(206,27,48)" fg:x="0" fg:w="2542"/><text x="0.2500%" y="62.50"></text></g><g><title>_run_module_as_main (runpy.py:196) (2,542 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(225,35,8)" fg:x="0" fg:w="2542"/><text x="0.2500%" y="78.50">_run_module_as_main (runpy.py:196)</text></g><g><title>_run_code (runpy.py:86) (2,542 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="2542"/><text x="0.2500%" y="94.50">_run_code (runpy.py:86)</text></g><g><title>&lt;module&gt; (cProfile.py:190) (2,542 samples, 100.00%)</title><rect x="0.0000%" y="100" width="100.0000%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="2542"/><text x="0.2500%" y="110.50">&lt;module&gt; (cProfile.py:190)</text></g><g><title>main (cProfile.py:179) (2,542 samples, 100.00%)</title><rect x="0.0000%" y="116" width="100.0000%" height="15" fill="rgb(231,138,38)" fg:x="0" fg:w="2542"/><text x="0.2500%" y="126.50">main (cProfile.py:179)</text></g><g><title>runctx (cProfile.py:19) (2,542 samples, 100.00%)</title><rect x="0.0000%" y="132" width="100.0000%" height="15" fill="rgb(231,145,46)" fg:x="0" fg:w="2542"/><text x="0.2500%" y="142.50">runctx (cProfile.py:19)</text></g><g><title>runctx (profile.py:62) (2,542 samples, 100.00%)</title><rect x="0.0000%" y="148" width="100.0000%" height="15" fill="rgb(251,118,11)" fg:x="0" fg:w="2542"/><text x="0.2500%" y="158.50">runctx (profile.py:62)</text></g><g><title>runctx (cProfile.py:100) (2,542 samples, 100.00%)</title><rect x="0.0000%" y="164" width="100.0000%" height="15" fill="rgb(217,147,25)" fg:x="0" fg:w="2542"/><text x="0.2500%" y="174.50">runctx (cProfile.py:100)</text></g><g><title>&lt;module&gt; (complex.py:30) (2,542 samples, 100.00%)</title><rect x="0.0000%" y="180" width="100.0000%" height="15" fill="rgb(247,81,37)" fg:x="0" fg:w="2542"/><text x="0.2500%" y="190.50">&lt;module&gt; (complex.py:30)</text></g><g><title>complex_function (complex.py:21) (3 samples, 0.12%)</title><rect x="99.8820%" y="196" width="0.1180%" height="15" fill="rgb(209,12,38)" fg:x="2539" fg:w="3"/><text x="100.1320%" y="206.50"></text></g></svg></svg>